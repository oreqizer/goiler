package main

import (
	"flag"
	"log"
	"os"
	"strings"
	"text/template"
)

/**
TODOs:
- add comments
- sort imports
*/

func main() {
	var typename string
	flag.StringVar(&typename, "struct", "", "struct name to generate")

	var models string
	flag.StringVar(&models, "models", "", "models package")

	flag.Parse()

	f, err := os.Create(strings.ToLower(typename) + "relay_gen.go")
	if err != nil {
		log.Fatal(err)
	}
	defer f.Close()

	err = tmpl.Execute(f, struct {
		Typename string
		Models   string
	}{
		Typename: typename,
		Models:   models,
	})
	if err != nil {
		log.Fatal(err)
	}
}

var tmpl = template.Must(template.New("").Parse(`// Code generated by go generate, DO NOT EDIT.

package main

import (
	"github.com/oreqizer/go-relay"
  "{{ .Models }}"
)

type {{ .Typename }}s []*models.{{ .Typename }}

func (s {{ .Typename }}s) ToSlice() []{{ .Typename }} {
	ns := make([]{{ .Typename }}, len(s))
	for i, v := range s {
		ns[i] = {{ .Typename }}{{"{"}}{{ .Typename }}: *v}
	}

	return ns
}

func (s {{ .Typename }}s) ToPointerSlice() []*{{ .Typename }} {
	ns := make([]*{{ .Typename }}, len(s))
	for i, v := range s {
		ns[i] = &{{ .Typename }}{{"{"}}{{ .Typename }}: *v}
	}

	return ns
}

type {{ .Typename }}Edge struct {
	Node   *{{ .Typename }}
	Cursor string
}

type {{ .Typename }}Connection struct {
	Edges    []*{{ .Typename }}Edge
	PageInfo relay.PageInfo
}

func (s {{ .Typename }}s) ToEdges() []*{{ .Typename }}Edge {
	ns := make([]*{{ .Typename }}Edge, len(s))
	for i, v := range s {
		n := {{ .Typename }}{{"{"}}{{ .Typename }}: *v}
		ns[i] = &{{ .Typename }}Edge{
			Cursor: n.ID(),
			Node:   &n,
		}
	}

	return ns
}

func (s {{ .Typename }}s) ToConnection(args *relay.ConnectionArgs) *{{ .Typename }}Connection {
	ns := make([]relay.Node, len(s))
	for i, v := range s {
		ns[i] = &{{ .Typename }}{{"{"}}{{ .Typename }}: *v}
	}

	conn := relay.ConnectionFromArray(ns, args)

	edges := make([]*{{ .Typename }}Edge, len(conn.Edges))
	for i, v := range conn.Edges {
		edges[i] = &{{ .Typename }}Edge{Node: v.Node.(*{{ .Typename }}), Cursor: v.Cursor}
	}

	return &{{ .Typename }}Connection{
		Edges:    edges,
		PageInfo: conn.PageInfo,
	}
}
`))
