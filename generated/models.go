// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package generated

import (
	"fmt"
	"io"
	"strconv"

	"github.com/oreqizer/goiler/graphql/schemas"
)

type Node interface {
	IsNode()
}

type AddAccountInput struct {
	Name             string  `json:"name"`
	Surname          string  `json:"surname"`
	Email            string  `json:"email"`
	ClientMutationID *string `json:"clientMutationId"`
}

type AddAccountPayload struct {
	Account          *schemas.Account `json:"account"`
	ClientMutationID *string          `json:"clientMutationId"`
}

type DeleteAccountInput struct {
	ClientMutationID *string `json:"clientMutationId"`
}

type DeleteAccountPayload struct {
	DeletedID        string  `json:"deletedId"`
	ClientMutationID *string `json:"clientMutationId"`
}

type EditAccountInput struct {
	Name             string  `json:"name"`
	Surname          string  `json:"surname"`
	ClientMutationID *string `json:"clientMutationId"`
}

type EditAccountPayload struct {
	Account          *schemas.Account `json:"account"`
	ClientMutationID *string          `json:"clientMutationId"`
}

type Role string

const (
	RoleAdmin Role = "ADMIN"
	RoleUser  Role = "USER"
)

var AllRole = []Role{
	RoleAdmin,
	RoleUser,
}

func (e Role) IsValid() bool {
	switch e {
	case RoleAdmin, RoleUser:
		return true
	}
	return false
}

func (e Role) String() string {
	return string(e)
}

func (e *Role) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Role(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Role", str)
	}
	return nil
}

func (e Role) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
